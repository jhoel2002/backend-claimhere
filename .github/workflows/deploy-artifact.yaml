name: Deploy artifact
on:
  repository_dispatch:
    types: [deploy-artifact-event]
jobs:
  download-artifact-job:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read    
    steps:

      ########################################################
      # 1- Retrive parameters from payload and download artifact
      ########################################################
      - run: echo ${{ github.event.client_payload.checksum }}

      - name: Retrieve Payload
        run: |
          echo ${{ github.event.client_payload.checksum }}

      - uses: dawidd6/action-download-artifact@v9
        id: download-artifact
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: publish-jar-artifact.yaml
          workflow_conclusion: success
          name: artifactjar
          path: /tmp/artifactjar
          
      - name: Display structure of downloaded files
        run: ls -R /tmp/artifactjar


      - name: checksum of download-artifact
        if: success()
        id: hash      
        run: echo "HASH=$(sha1sum /tmp/artifactjar/${{ github.event.client_payload.artifact_name }} | awk '{ print $1 }')" >> $GITHUB_ENV


      - name: compare checksum 
        run: |
          if [ "${{ env.HASH }}" == "${{ github.event.client_payload.checksum }}" ]; then
              echo "The checksum are equals! seccesfully operations."
          else
              echo "Â¡The checksum are no equals! failure operation."            
              exit 1;
          fi

            
      ######################################################## 
      # 2- Dolowload source code from default branch in order to retrive Dockerfile, and upload it as docker build context
      ########################################################
      
      - uses: actions/checkout@v4      
        if: success()
      - run: |
          echo print the current directory show files
          ls -la 
          echo preparing docker build context
          cp .docker/Dockerfile /tmp/Dockerfile
          cp /tmp/artifactjar/${{ github.event.client_payload.artifact_name }} /tmp/${{ github.event.client_payload.artifact_name }}
          ls -la /tmp
          
      - name: Upload artifact       
        uses: actions/upload-artifact@v4
        with:
          name: dockerBuildContext
          path: |
            /tmp/Dockerfile
            /tmp/${{ github.event.client_payload.artifact_name }}

#**************************************************************
#2 Job for managment docker task 
#**************************************************************
  docker-job:
     needs:
        - download-artifact-job

     runs-on: ubuntu-latest
     permissions:
       contents: read
       actions: read
       packages: write
     steps: 

      ######################################################## 
      # 1- Set up QEMU,  free and open-source emulator. It emulates the machine's processor through dynamic binary translation
      ######################################################## 
      - name : Set up QEMU 
        uses : docker/setup-qemu-action@v3

      ######################################################## 
      # 2- Set up Docker Buildx 
      ########################################################  
      - name : Set up Docker Buildx 
        uses : docker/setup-buildx-action@v3 

      ######################################################## 
      # 3- Login to Docker Hub 
      ########################################################      
      - name : Login to Docker Hub 
        uses : docker/login-action@v3 
        with :
          registry: ghcr.io
          username: ${{ github.actor }}   
          password : ${{ secrets.GITHUB_TOKEN }} 

        ######################################################## 
        # 4- Download artifact
        ######################################################## 
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dockerBuildContext
          path: ./dockerBuildContext

        ######################################################## 
        # 5- Display structure
        ######################################################## 
      - name: Display structure of downloaded files
        run: ls -R dockerBuildContext

        ######################################################## 
        # 6- Display structure
        ######################################################### 
      - name : Build and push image using action 
        uses : docker/build-push-action@v6
        with :
          context : ./dockerBuildContext # Context where Dockerfile and artifact(.jar, .war ...) lives
          file : ./dockerBuildContext/Dockerfile # Where  Dockerfile is it. 
          #Parameters that our Dockerfile need.
          build-args: |      
            JAR_FILE=${{ github.event.client_payload.artifact_name }}
            DB_URL=${{ secrets.DB_URL_DEVELOP }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD_DEVELOP }}
            DB_USER=${{ secrets.DB_USER_DEVELOP }}
          push : true # Push image to registry, false by deafult.
          tags : ghcr.io/${{ github.repository_owner}}/cutomer-back:${{ github.sha }} # The image ful name, include repository, user, image name and tag 


      - name: trigger deploy app on EC2
        if: success()
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: deploy-app-event     
          client-payload: '{"sha": "${{ github.sha }}"}'     
    


